{"version":3,"sources":["cssVariablesAndJs..jsx","App.js","serviceWorker.js","index.js"],"names":["CssVariablesAndJs","_useState","useState","_useState2","Object","slicedToArray","color","setColor","_useState3","_useState4","space","_useState5","_useState6","blur","spaces","useRef","blurs","colors","useEffect","updateSpace","suffix","current","dataset","sizing","document","documentElement","style","setProperty","concat","name","value","updateBlur","react_default","a","createElement","className","ref","id","type","min","max","onChange","e","target","onMouseMove","el","data-sizing","col","src","alt","App","cssVariablesAndJs_","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAyDeA,SAtDW,WAAM,IAAAC,EACLC,mBAAS,WADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBK,EADwBH,EAAA,GACjBI,EADiBJ,EAAA,GAAAK,EAELN,qBAFKO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAExBE,EAFwBD,EAAA,GAAAE,GAAAF,EAAA,GAGPP,sBAHOU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGxBE,EAHwBD,EAAA,GAIzBE,GAJyBF,EAAA,GAIhBG,oBACTC,EAAQD,mBACRE,EAASF,mBAIfG,oBAAU,cAeX,IAAMC,EAAc,WACnB,IAAMC,EAASN,EAAOO,QAAQC,QAAQC,OACtCC,SAASC,gBAAgBC,MAAMC,YAA/B,KAAAC,OAAgDd,EAAOO,QAAQQ,MAAQf,EAAOO,QAAQS,MAAQV,IAEzFW,EAAa,WAClB,IAAMX,EAASJ,EAAMK,QAAQC,QAAQC,OACrCC,SAASC,gBAAgBC,MAAMC,YAA/B,KAAAC,OAAgDZ,EAAMK,QAAQQ,MAAQb,EAAMK,QAAQS,MAAQV,IAM5F,OACAY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,uCAA8BF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAhB,OAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOE,IAAKtB,EAAQuB,GAAG,UAAUC,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMX,KAAK,UAAUC,MAAOpB,EAAO+B,SAAU,SAAAC,GAAC,OAAIvB,EAAYuB,EAAEC,OAAOb,QAAQc,YAAa,SAAAC,GAAE,OAAG1B,EAAY0B,EAAGF,OAAOb,QAAQgB,cAAY,OAErMd,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOE,IAAKpB,EAAOqB,GAAG,OAAOC,KAAK,QAAQT,KAAK,OAAOW,IAAI,KAAKD,IAAI,IAAIT,MAAOjB,EAAM4B,SAAU,SAAAC,GAAC,OAAIX,EAAWW,EAAEC,OAAOb,QAAQc,YAAa,SAAAC,GAAE,OAAGd,EAAWc,EAAGF,OAAOb,QAAOgB,cAAY,OAExLd,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAQG,GAAG,OAAOD,IAAKnB,EAAQqB,KAAK,QAAQT,KAAK,OAAOC,MAAOxB,EAAOmC,SAAU,SAAAC,GAAC,OAflEK,EAekFL,EAAEC,OAAOb,MAd/GvB,EAASwC,QACTvB,SAASC,gBAAgBC,MAAMC,YAA/B,KAAAC,OAAgDX,EAAOI,QAAQQ,MAAQZ,EAAOI,QAAQS,OAFnE,IAACiB,MAiBjBf,EAAAC,EAAAC,cAAA,OAAKc,IAAI,kDAAkDC,IAAI,qBCzCpDC,MARf,WACE,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.615720c1.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './cssVariablesAndJs.css'\r\n\r\nconst CssVariablesAndJs = () => {\r\n\tconst [color, setColor] = useState('#ffc600');\r\n\tconst [space, setSpace] = useState();\r\n\tconst [blur, setBlur] = useState();\r\n\tconst spaces = useRef();\r\n\tconst blurs = useRef();\r\n\tconst colors = useRef();\r\n\t// const handleUpdate = (input) => {\r\n\t// \tconsole.log(input.value);\r\n\t// }\r\n\tuseEffect(() => {\r\n\t// \twindow.addEventListener('load', () => {\r\n\t// \t\tconst elements = document.querySelectorAll('input');\r\n\t// \t\telements.forEach(input => input.addEventListener('change', handleUpdate(input)));\r\n\t// \t})\r\n\t// const allInputs = inputs.current;\r\n\t// console.log(inputs);\r\n})\r\n\t\t\r\n\t\t\r\n// console.log(input)\r\n\t// const element = document.querySelectorAll('.controls input');\r\n// const handleUpdate = () => {\r\n\r\n// }\r\nconst updateSpace = () => {\r\n\tconst suffix = spaces.current.dataset.sizing;\r\n\tdocument.documentElement.style.setProperty(`--${spaces.current.name}`, spaces.current.value + suffix);\r\n}\r\nconst updateBlur = () => {\r\n\tconst suffix = blurs.current.dataset.sizing;\r\n\tdocument.documentElement.style.setProperty(`--${blurs.current.name}`, blurs.current.value + suffix);\r\n}\r\nconst updateColor = (col) => {\r\n\tsetColor(col);\r\n\tdocument.documentElement.style.setProperty(`--${colors.current.name}`, colors.current.value);\r\n}\r\n\treturn (\r\n\t<div className=\"container\">\r\n\t\t<h2>Update CSS Variables with <span className='h1'>JS</span></h2>\r\n\t\t\t<div className=\"controls\">\r\n\t\t\t\t<label>Spacing:</label>\r\n\t\t\t\t<input ref={spaces} id=\"spacing\" type=\"range\" min=\"10\" max=\"200\" name=\"spacing\" value={space} onChange={e => updateSpace(e.target.value)} onMouseMove={el=> updateSpace(el.target.value)} data-sizing=\"px\"/>\r\n\r\n\t\t\t\t\t<label>Blur:</label>\r\n\t\t\t\t\t<input ref={blurs} id=\"blur\" type=\"range\" name=\"blur\" max=\"25\" min=\"0\" value={blur} onChange={e => updateBlur(e.target.value)} onMouseMove={el=> updateBlur(el.target.value)}data-sizing=\"px\"/>\r\n\r\n\t\t\t\t\t\t<label>Base Color</label>\r\n\t\t\t\t\t\t<input  id=\"base\" ref={colors} type=\"color\" name=\"base\" value={color} onChange={e => updateColor(e.target.value)} />\r\n      </div>\r\n    <img src=\"https://source.unsplash.com/7bwQXzbF6KE/800x500\" alt=\"nothing\"/>\r\n\t</div>\r\n\t)\r\n\t\t\t\t\t}\r\nexport default CssVariablesAndJs","import React from 'react';\nimport CssVariablesAndJs from './cssVariablesAndJs.'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssVariablesAndJs></CssVariablesAndJs>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}